# -*- coding: utf-8 -*-
"""
Created on Tue Apr 30 16:18:36 2019

@author: Abhilash
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import preprocessing


def load_data(path, header):
    marks_df = pd.read_csv(path, header=header)
    return marks_df

data = load_data('Classification data.txt',None)

x = data.iloc[:,:-1]
y = data.iloc[:,-1]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
scalar = preprocessing.StandardScaler()
x_train = scalar.fit_transform(x_train)
admitted = data.loc[y==1]
nonadmitted = data.loc[y==0]

plt.scatter(admitted.iloc[:,0],admitted.iloc[:,1],s=10,label='admitted')
plt.scatter(nonadmitted.iloc[:,0],nonadmitted.iloc[:,1],s=10,label='nonadmitted')
plt.legend()
plt.show()

X = np.asarray(x_train)
Y = np.asarray(y_train)
Y = Y.reshape(80,1)
theta = np.zeros(X.shape[1])
theta = theta.reshape(2,1)
#to calcualtr hypothesis function values
def sigmoid(x):
    return 1/(1+np.exp(-x))
def hypothesis(X,theta):
    a = np.dot(X,theta)
    return sigmoid(a)
#to return parameters

    
def costfunction(learningrate,X,Y,theta,numofiterations):
    costhistory = []
    thetahistory = []
    for i in range(numofiterations):
        costvalue = np.dot(np.transpose(Y),np.log(hypothesis(X,theta)))+np.dot(np.transpose((1-Y)),(np.log(1-(hypothesis(X,theta)))))
        costhistory.append(costvalue)
        thetahistory.append(theta)
        k = Y-hypothesis(X,theta)
        m = float(X.shape[0])
        
        #k = k.reshape(100,1)
        theta = (theta +(np.transpose(learningrate*(np.dot(np.transpose(k),(X))))))
        #print i
    return theta,costhistory,thetahistory

theta,costhistory,thetahistory = costfunction(0.01,X,Y,theta,1000)

itera = np.arange(0,1000,1)
costhistory = np.asarray(costhistory)
costhistory = costhistory.reshape(1000,1)

plt.plot(itera,costhistory)
plt.show()

y_test = np.asarray(y_test)
y_test = y_test.reshape(20,1)
x_test = scalar.fit_transform(x_test)
y_pred = hypothesis(x_test,theta)
y_pred_new = []
for i in range(len(y_pred)):
    if(y_pred[i]<0.5):
        y_pred_new.append(0)
    else:
        y_pred_new.append(1)

y_pred_new = np.asarray(y_pred_new)
y_pred_new = y_pred_new.reshape(20,1)

count = 0
for i in range(len(y_test)):
    if(y_test[i]==y_pred_new[i]):
        count = count + 1
accuracy = float(count/float(len(y_test)))    
   
##Checking Standerdized scalar
#Normalization = (x-x(min)/x(max)-x(min))
#Standardiazation = x-mu/sigma


